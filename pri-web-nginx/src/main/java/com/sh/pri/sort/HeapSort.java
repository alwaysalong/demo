package com.sh.pri.sort;

/**
 * 选择排序—堆排序（Heap Sort）
 * @author admin
 * 第一次从下标为0的开始下标为0的这个数与后面的n-1个进行比较；找出最小或者最大的放在下标为0的这个位置；第二次从下标为1的开始比较；查询剩下的最大或者最小值；放在 
 * 下标为1的位置；以此类推；直到排序完成
 * 第1次排序  :  1  54  23  87  22  27  12  5
 * 第2次排序  :  1  5  54  87  23  27  22  12
 * 第3次排序  :  1  5  12  87  54  27  23  22
 * 第4次排序  :  1  5  12  22  87  54  27  23
 * 第5次排序  :  1  5  12  22  23  87  54  27
 * 第6次排序  :  1  5  12  22  23  27  87  54
 * 第7次排序  :  1  5  12  22  23  27  54  87
 * 第8次排序  :  1  5  12  22  23  27  54  87
 *           1  5  12  22  23  27  54  87  
 */
public class HeapSort {

	public static void main(String[] args) {
		int [] a = {54,23,22,87,12,27,5,1};
		//外层是总共需要进行多少次大的判断(角标0与后面所有的依次比较,小的放在0位置;角标1与后面的全部比较,小的放1位置;以此类推    就是升序排序     所以需要比length次)
		for (int i = 0; i < a.length; i++) {
			//内层是每次大的判断里面  剩余的这组数中第一个数与后面的数依次比较(第一次  就是角标0的数为坐标与后面所有的数依次比较.小的就放到所选的坐标处;第二次是拿角标为1的数为坐标与后面的数依次比较.小的就放到所选的坐标处;依次类推...)
			//因为每次小循环开始作为坐标点的角标都会往后移一位,也就是坐标点实际就是外层循环的开始的角标点的数,也就是i  ,也就是index = i
			//内层循环 循环的是坐标点的数要与之比较的那个数组   因此循环次数就是 a.length
			int index = i;
			for (int j = index + 1; j < a.length; j++) {
				//如果坐标点的数大于后面的数,那就把后面的数放到坐标点位置
				if (a[i] > a[j]) {
					a[i] = a[i] + a[j];
					a[j] = a[i] - a[j];
					a[i] = a[i] - a[j];
				}
			}
			System.out.print("第"+(i+1)+"次排序  :");
			for (int x = 0; x < a.length; x++) {
				System.out.print("  " + a[x]);
			}
			System.out.println("");
		}
		for (int x = 0; x < a.length; x++) {
			System.out.print(a[x] + "  ");
		}
	}
}
